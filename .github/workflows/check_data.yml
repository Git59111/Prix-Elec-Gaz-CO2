name: üîç V√©rification et alerte EPEX / Gaz / CO2

on:
  workflow_run:
    workflows: ["Extract EPEX data from HTML"]  # se d√©clenche apr√®s ton extraction
    types:
      - completed
  workflow_dispatch:  # permet aussi le lancement manuel

jobs:
  check-data:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl

      - name: üîé Run data completeness check
        id: check
        run: |
          echo "üß† Lancement de la v√©rification du fichier Excel..."
          python check_data_completeness.py > result.log 2>&1 || echo "1" > failed.txt
          echo "üîç Contenu du log :"
          cat result.log
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat result.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üì® Cr√©er une issue d‚Äôalerte sur GitHub
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const log = fs.existsSync('result.log') ? fs.readFileSync('result.log', 'utf8') : 'Aucun log disponible.';
            const failed = fs.existsSync('failed.txt');
            const status = failed ? '‚ö†Ô∏è Donn√©es manquantes d√©tect√©es' : '‚úÖ Donn√©es compl√®tes';
            const title = `${status} ‚Äî V√©rification automatique`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: log
            });
